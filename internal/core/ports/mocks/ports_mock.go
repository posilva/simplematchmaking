// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/ports.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/ports.go -destination=internal/core/ports/mocks/ports_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/posilva/simplematchmaking/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debug", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Error", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, v ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, v ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// MockMatchmakingService is a mock of MatchmakingService interface.
type MockMatchmakingService struct {
	ctrl     *gomock.Controller
	recorder *MockMatchmakingServiceMockRecorder
}

// MockMatchmakingServiceMockRecorder is the mock recorder for MockMatchmakingService.
type MockMatchmakingServiceMockRecorder struct {
	mock *MockMatchmakingService
}

// NewMockMatchmakingService creates a new mock instance.
func NewMockMatchmakingService(ctrl *gomock.Controller) *MockMatchmakingService {
	mock := &MockMatchmakingService{ctrl: ctrl}
	mock.recorder = &MockMatchmakingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchmakingService) EXPECT() *MockMatchmakingServiceMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method.
func (m *MockMatchmakingService) AddPlayer(arg0 domain.Player) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockMatchmakingServiceMockRecorder) AddPlayer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockMatchmakingService)(nil).AddPlayer), arg0)
}

// MockProvider is a mock of Provider interface.
type MockProvider[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder[T]
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder[T any] struct {
	mock *MockProvider[T]
}

// NewMockProvider creates a new mock instance.
func NewMockProvider[T any](ctrl *gomock.Controller) *MockProvider[T] {
	mock := &MockProvider[T]{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider[T]) EXPECT() *MockProviderMockRecorder[T] {
	return m.recorder
}

// Provide mocks base method.
func (m *MockProvider[T]) Provide() (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provide")
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Provide indicates an expected call of Provide.
func (mr *MockProviderMockRecorder[T]) Provide() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockProvider[T])(nil).Provide))
}

// MockTelemetryReporter is a mock of TelemetryReporter interface.
type MockTelemetryReporter struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryReporterMockRecorder
}

// MockTelemetryReporterMockRecorder is the mock recorder for MockTelemetryReporter.
type MockTelemetryReporterMockRecorder struct {
	mock *MockTelemetryReporter
}

// NewMockTelemetryReporter creates a new mock instance.
func NewMockTelemetryReporter(ctrl *gomock.Controller) *MockTelemetryReporter {
	mock := &MockTelemetryReporter{ctrl: ctrl}
	mock.recorder = &MockTelemetryReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryReporter) EXPECT() *MockTelemetryReporterMockRecorder {
	return m.recorder
}

// ReportCounter mocks base method.
func (m *MockTelemetryReporter) ReportCounter(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportCounter", name, value, tags)
}

// ReportCounter indicates an expected call of ReportCounter.
func (mr *MockTelemetryReporterMockRecorder) ReportCounter(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportCounter", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportCounter), name, value, tags)
}

// ReportGauge mocks base method.
func (m *MockTelemetryReporter) ReportGauge(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportGauge", name, value, tags)
}

// ReportGauge indicates an expected call of ReportGauge.
func (mr *MockTelemetryReporterMockRecorder) ReportGauge(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportGauge", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportGauge), name, value, tags)
}

// ReportHistogram mocks base method.
func (m *MockTelemetryReporter) ReportHistogram(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportHistogram", name, value, tags)
}

// ReportHistogram indicates an expected call of ReportHistogram.
func (mr *MockTelemetryReporterMockRecorder) ReportHistogram(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportHistogram", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportHistogram), name, value, tags)
}

// ReportSummary mocks base method.
func (m *MockTelemetryReporter) ReportSummary(name string, value float64, tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportSummary", name, value, tags)
}

// ReportSummary indicates an expected call of ReportSummary.
func (mr *MockTelemetryReporterMockRecorder) ReportSummary(name, value, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportSummary", reflect.TypeOf((*MockTelemetryReporter)(nil).ReportSummary), name, value, tags)
}

// SetDefaultTags mocks base method.
func (m *MockTelemetryReporter) SetDefaultTags(tags map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultTags", tags)
}

// SetDefaultTags indicates an expected call of SetDefaultTags.
func (mr *MockTelemetryReporterMockRecorder) SetDefaultTags(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultTags", reflect.TypeOf((*MockTelemetryReporter)(nil).SetDefaultTags), tags)
}
